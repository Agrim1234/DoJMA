package com.csatimes.dojma;import android.app.NotificationManager;import android.app.PendingIntent;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.content.SharedPreferences;import android.content.res.Configuration;import android.os.Bundle;import android.support.annotation.Nullable;import android.support.design.widget.Snackbar;import android.support.v4.app.Fragment;import android.support.v4.content.ContextCompat;import android.support.v4.widget.SwipeRefreshLayout;import android.support.v7.widget.DividerItemDecoration;import android.support.v7.widget.GridLayoutManager;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import com.csatimes.dojma.adapters.HeraldRV;import com.csatimes.dojma.models.HeraldNewsItemFormat;import com.csatimes.dojma.utilities.DHC;import com.turingtechnologies.materialscrollbar.DragScrollBar;import io.realm.Realm;import io.realm.RealmList;import io.realm.RealmResults;import io.realm.Sort;public class Herald extends Fragment implements SwipeRefreshLayout.OnRefreshListener {    private HeraldRV adapter;    private boolean landscape = false;    private RecyclerView heraldRecyclerView;    private SharedPreferences preferences;    private Realm database;    private DragScrollBar dragScrollBar;    private RealmResults<HeraldNewsItemFormat> results;    private RealmList<HeraldNewsItemFormat> resultsList;    private SwipeRefreshLayout swipeRefreshLayout;    BroadcastReceiver broadcastReceiver = new BroadcastReceiver() {        @Override        public void onReceive(Context context, Intent intent) {            //Show snackbar to notify user that update check completed but            //no articles were downloaded.            //Also since Update service is fired every time in onStop of HomeActivity            //we add a check for swipelayout's refresh status            //If user had initiated refreshing only then show snackbar            //CODE FOLDED HERE            if (intent.getAction().compareTo(UpdateCheckerService.UPDATE_CHECK_OVER) == 0 &&                    swipeRefreshLayout.isRefreshing()) {                swipeRefreshLayout.setRefreshing(false);                try {                    Snackbar.make(heraldRecyclerView, "No updates available", Snackbar.LENGTH_SHORT)                            .show();                } catch (Exception e) {                    //Snackbar requires non null view,so if that fails we get the log                    Log.e("TAG", "RecyclerView is null");                }            } else if (intent.getAction().compareTo(UpdateCheckerService.DOWNLOAD_SUCCESS_ACTION) == 0) {                //cancel any pending intent and notification                Intent openHerald = new Intent(context, HomeActivity.class);                PendingIntent.getActivity(context, DHC.UPDATE_SERVICE_PENDING_INTENT_CODE, openHerald, PendingIntent.FLAG_CANCEL_CURRENT).cancel();                NotificationManager notificationManager = (NotificationManager) getActivity().getSystemService(Context.NOTIFICATION_SERVICE);                notificationManager.cancel(DHC.UPDATE_SERVICE_NOTIFICATION_CODE);                //update ui                try {                    if (resultsList.size() != 0 && adapter != null) {                        resultsList.clear();                        resultsList.addAll(database.where(HeraldNewsItemFormat.class).findAllSorted                                ("originalDate", Sort.DESCENDING));                        adapter.notifyDataSetChanged();                        try {                            Snackbar.make(heraldRecyclerView, "Articles were updated", Snackbar                                    .LENGTH_SHORT)                                    .show();                        } catch (Exception e) {                            //Snackbar requires non null view,so if that fails we get the log                            Log.e("TAG", "RecyclerView is null");                        }                    }else{                        DHC.log("0 downloaded or adapter is null");                    }                } catch (Exception e) {                    Log.e("TAG", "Exception");                } finally {                    swipeRefreshLayout.setRefreshing(false);                }            }            if (intent.getAction().equalsIgnoreCase(ImageUrlHandlerService.IMAGE_SERVICE_SUCCESS)) {                adapter.notifyDataSetChanged();            }        }    };    public Herald() {        // Required empty public constructor    }    @Override    public void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        landscape = getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE;        preferences = getContext().getSharedPreferences(DHC.USER_PREFERENCES,                Context.MODE_PRIVATE);    }    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        View V = inflater.inflate(R.layout.fragment_herald, container, false);        heraldRecyclerView = (RecyclerView) V.findViewById(R.id.herald_recycler_view);        swipeRefreshLayout = (SwipeRefreshLayout) V.findViewById(R.id.swipe_refresh_container);        database = Realm.getDefaultInstance();        results = database.where(HeraldNewsItemFormat.class).equalTo("dismissed", false)                .findAllSorted("originalDate", Sort.DESCENDING);        DHC.log("size of herald articles is " + results.size());        resultsList = new RealmList<>();        resultsList.addAll(results);        adapter = new HeraldRV(getContext(), resultsList, database, getActivity());        adapter.setGoogleChromeInstalled(preferences.getBoolean(getString(R.string.SP_chrome_install_status), false));        dragScrollBar = new DragScrollBar(getContext(), heraldRecyclerView, true)                .setDraggableFromAnywhere(true).setHandleColour(ContextCompat.getColor(getContext(), R.color.colorAccent))                .setBarColour(ContextCompat.getColor(getContext(), R.color.grey500))                .setHandleOffColour(ContextCompat.getColor(getContext(), R.color.grey800));        heraldRecyclerView.setHasFixedSize(true);        heraldRecyclerView.addItemDecoration(new DividerItemDecoration(getContext(),DividerItemDecoration.VERTICAL));        if (!landscape) {            heraldRecyclerView.setLayoutManager(new LinearLayoutManager(getContext()));        } else {            heraldRecyclerView.setLayoutManager(new GridLayoutManager(getContext(), 2, LinearLayoutManager.VERTICAL, false));            adapter.setLandscape(true);        }        heraldRecyclerView.setAdapter(adapter);        swipeRefreshLayout.setColorSchemeResources(R.color.amber500, R.color.blue500, R.color                .brown500, R.color.cyan500, R.color.deeporange500, R.color.deepPurple500, R.color.green500, R                .color.grey500, R.color.indigo500, R.color.lightblue500, R.color.lime500, R.color                .orange500, R.color.pink500, R.color.red500, R.color.teal500, R.color.violet500, R                .color.yellow500);        swipeRefreshLayout.setOnRefreshListener(this);        return V;    }    @Override    public void onResume() {        super.onResume();        IntentFilter intf = new IntentFilter();        intf.addAction(UpdateCheckerService.DOWNLOAD_SUCCESS_ACTION);        intf.addAction(UpdateCheckerService.UPDATE_CHECK_OVER);        getActivity().registerReceiver(broadcastReceiver, intf);    }    @Override    public void onPause() {        super.onPause();        getActivity().unregisterReceiver(broadcastReceiver);    }    @Override    public void onRefresh() {        if (UpdateCheckerService.instance == null) {            if (ImageUrlHandlerService.instance == null) {                final Intent intent = new Intent(getContext(), UpdateCheckerService.class);                getContext().startService(intent);            } else {                swipeRefreshLayout.setRefreshing(false);                Snackbar.make(swipeRefreshLayout, "Update check is already in progress", Snackbar                        .LENGTH_SHORT).show();            }        } else {            swipeRefreshLayout.setRefreshing(false);            Snackbar.make(swipeRefreshLayout, "Update check is already in progress", Snackbar                    .LENGTH_SHORT).show();        }    }}