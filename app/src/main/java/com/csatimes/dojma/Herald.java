package com.csatimes.dojma;import android.content.Context;import android.content.Intent;import android.content.SharedPreferences;import android.content.res.Resources;import android.database.Cursor;import android.database.sqlite.SQLiteDatabase;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.net.Uri;import android.os.AsyncTask;import android.os.Bundle;import android.os.Environment;import android.preference.PreferenceManager;import android.support.annotation.Nullable;import android.support.v4.app.Fragment;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.ListView;import org.jsoup.Jsoup;import org.jsoup.nodes.Attributes;import org.jsoup.nodes.Document;import org.jsoup.nodes.Element;import org.jsoup.select.Elements;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.net.MalformedURLException;import java.net.URL;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.List;import java.util.concurrent.ExecutionException;public class Herald extends Fragment {    //This is the website that we will be parsing.    public static String address = "http://csatimes.co.in/dojma";    ListView heraldListView;    private List<HeraldItemObject> itemsList = new ArrayList<>();    public static String ROOT_DIRECTORY = Environment.getExternalStorageDirectory().toString();    public static String dojmaFolderName = "dojmaImages";    boolean isItFirstTime = false;    Cursor cr;    DatabaseOperations dop;    CustomHeraldAdapter adapter;    SharedPreferences preferences;    SharedPreferences.Editor editor;    public Herald() {        // Required empty public constructor    }    //Class of type Herald News    public class HeraldItemObject {        String postID;        String title;        String url;        String author;        String date;        String imageURL;        //Constructor for the news item        public HeraldItemObject(String postID, String title, String url, String author, String date,                                String imageURL) {            this.postID = postID;            this.title = title;            this.url = url;            this.author = author;            this.date = date;            this.imageURL = imageURL;        }    }    @Override    public void onPause() {        super.onPause();        editor.apply();    }    @Override    public void onStop() {        super.onStop();        editor.putBoolean("AppStarted", false);        editor.apply();    }    @Override    public void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        Log.e("TAG", "OnCreate called");        preferences = getActivity().getApplicationContext().getSharedPreferences(HomeActivity.user_pref_name,                Context.MODE_PRIVATE);        editor = preferences.edit();//        if (isItFirstTime) {        {          //download            Log.e("TAG", "FirstTimeForonCreate");            editor.putBoolean("IsItFirstTime", false);            editor.apply();            //If app was started check for updates only once            //otherwise manually user can check for update            new Thread(new Runnable() {                @Override                public void run() {                    dop = new DatabaseOperations(getContext());                    cr = dop.getInformation();                    Log.e("TAG", cr.getCount() + " is initially NUMBER OF ITEMS");                    loadList();                    Log.e("TAG", cr.getCount() + " is final NUMBER OF ITEMS");                }            }).start();            //} else {            Log.e("TAG", "Oncreate was called once");            //download new only            //and show old ones in database        }        // req? editor.apply();        //dateDiff("2", "1");    }    private void loadList() {        long timeStart = System.currentTimeMillis();        boolean downloadSuc = false;        int downloadAttempt = 0;        try {            while (!downloadSuc && downloadAttempt < 3) {                Document document = new DownloadDocument().execute(new URL(address)).get();                {                    if (document == null) {                        Log.e("TAG", "Failed to download document");                        downloadAttempt++;                    } else {                        //notify of download success                        downloadSuc = true;                        String imageurl = "-1";                        //Get all elements that have the "article" tag                        Elements docElements = document.getElementsByTag("article");                        //Log.e("TAG", "No. of articles found - " + docElements.size());                        Attributes postIDAttribute, mainAttribute, dateAttrib, imageURLAttribute;                        for (Element element : docElements) {                            postIDAttribute = element.attributes();                            mainAttribute = element.child(0).child(0).attributes();                            dateAttrib = element.child(1).child(0).child(0).child(0)                                    .child(0).attributes                                            ();  //or 1 at last pos // check for updated time also //time check                            // is also important                            //check if article has an associated img to it                            if (!element.getElementsByAttribute("src").isEmpty()) {                                imageURLAttribute = element.child(0).child(0).child(0)                                        .attributes();                                imageurl = imageURLAttribute.get                                        ("src");                            } else {                                imageurl = "-1";                            }                            ///adding all these parsed values to itemsLIst by creating a new                            // HeraldItemObjecct everytime                            {                                itemsList.add(new HeraldItemObject(postIDAttribute.get("id"), mainAttribute                                        .get                                                ("title"),                                        mainAttribute.get("href"),                                        "dojma_admin", dateAttrib.get("datetime"), imageurl));                                dop.insertRow(itemsList.get(itemsList.size() - 1));                            }                        }                    }                }            }        } catch (InterruptedException e) {            e.printStackTrace();        } catch (ExecutionException e) {            e.printStackTrace();        } catch (MalformedURLException e) {            e.printStackTrace();        }        long endTime = System.currentTimeMillis();        Log.e("TAG", "time taken to load arraylist " + (endTime - timeStart));    }    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        Log.e("TAG", "onCreateView Called");        View V = inflater.inflate(R.layout.fragment_herald, container, false);        adapter = new CustomHeraldAdapter(getContext(), itemsList);        heraldListView = (ListView) V.findViewById(R.id.herald_list_view);        heraldListView.setAdapter(adapter);        //Handle click events on items        //will be replaced by an in app viewer        heraldListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                Uri uri = Uri.parse(itemsList.get(position)                        .url);                Intent openWebpage = new Intent(Intent.ACTION_VIEW, uri);                startActivity(openWebpage);            }        });        return V;    }    //Async method to download html document for parsing    private class DownloadDocument extends AsyncTask<URL, Float, Document> {        //AsyncTask has <params,progress,result> format        protected Document doInBackground(URL... urls) {            org.jsoup.nodes.Document doc = null;            try {                Log.e("TAG", "attempting downloading");                doc = Jsoup.connect(urls[0].toString()).get();                if (doc == null) Log.e("TAG", "null when downloaded");                else {                    Log.e("TAG", doc.title())                    ;                }            } catch (IOException e) {                e.printStackTrace();            }            Log.e("TAG", "HTML downloaded");            return doc;        }    }    private void dateDiff(String dateNew, String old) {        String dateStr = "2016-01-21";        SimpleDateFormat curFormater = new SimpleDateFormat("yyyy-MM-dd");        Date dateObj = null;        try {            dateObj = curFormater.parse(dateStr);            SimpleDateFormat postFormater = new SimpleDateFormat("yyyyMMdd");            String newDateStr = postFormater.format(dateObj);            Log.e("TAG", newDateStr);        } catch (ParseException e) {            e.printStackTrace();        }    }}