package com.csatimes.dojma;import android.app.Activity;import android.app.PendingIntent;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.graphics.BitmapFactory;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.support.customtabs.CustomTabsIntent;import android.support.design.widget.Snackbar;import android.support.v4.app.Fragment;import android.support.v4.content.ContextCompat;import android.support.v4.widget.SwipeRefreshLayout;import android.support.v7.widget.DividerItemDecoration;import android.support.v7.widget.GridLayoutManager;import android.support.v7.widget.RecyclerView;import android.util.DisplayMetrics;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import com.csatimes.dojma.adapters.HeraldRV;import com.csatimes.dojma.models.HeraldNewsItemFormat;import com.csatimes.dojma.utilities.DHC;import com.turingtechnologies.materialscrollbar.DragScrollBar;import io.realm.Realm;import io.realm.RealmList;import io.realm.Sort;public class Herald extends Fragment implements        SwipeRefreshLayout.OnRefreshListener,        HeraldRV.OnLikeClickedListener,        HeraldRV.OnShareClickedListener,        HeraldRV.OnItemClickedListener {    private HeraldRV adapter;    private RecyclerView heraldRecyclerView;    private Realm database;    private DragScrollBar dragScrollBar;    private RealmList<HeraldNewsItemFormat> resultsList;    private SwipeRefreshLayout swipeRefreshLayout;    private BroadcastReceiver broadcastReceiver = new BroadcastReceiver() {        @Override        public void onReceive(Context context, Intent intent) {            //Show snackbar to notify user that update check completed but            //no articles were downloaded.            //Also since Update service is fired every time in onStop of HomeActivity            //we add a check for swipelayout's refresh status            //If user had initiated refreshing only then show snackbar            //CODE FOLDED HERE            if (intent.getAction().compareTo(UpdateCheckerService.UPDATE_CHECK_OVER) == 0 &&                    swipeRefreshLayout.isRefreshing()) {                swipeRefreshLayout.setRefreshing(false);                Snackbar.make(swipeRefreshLayout, "No updates available", Snackbar.LENGTH_SHORT).show();            } else if (intent.getAction().compareTo(UpdateCheckerService.DOWNLOAD_SUCCESS_ACTION) == 0) {                if (adapter != null) {                    resultsList.clear();                    resultsList.addAll(database.where(HeraldNewsItemFormat.class).findAllSorted                            ("originalDate", Sort.DESCENDING));                    adapter.notifyItemRangeInserted(0, resultsList.size());                    Snackbar.make(swipeRefreshLayout, "Articles were updated", Snackbar.LENGTH_SHORT).show();                } else {                    DHC.log("adapter is null after update checker service finished");                }                swipeRefreshLayout.setRefreshing(false);            } else if (intent.getAction().compareTo(ImageUrlHandlerService.IMAGE_SERVICE_SUCCESS)==0){                if (adapter != null) {                    resultsList.clear();                    resultsList.addAll(database.where(HeraldNewsItemFormat.class).findAllSorted                            ("originalDate", Sort.DESCENDING));                    adapter.notifyItemRangeChanged(0, resultsList.size());                } else {                    DHC.log("Herald Adapter is null during image service completion");                }            }        }    };    public Herald() {        // Required empty public constructor    }    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        View V = inflater.inflate(R.layout.fragment_herald, container, false);        heraldRecyclerView = (RecyclerView) V.findViewById(R.id.herald_recycler_view);        swipeRefreshLayout = (SwipeRefreshLayout) V.findViewById(R.id.swipe_refresh_container);        database = Realm.getDefaultInstance();        resultsList = new RealmList<>();        resultsList.addAll(database.where(HeraldNewsItemFormat.class).equalTo("dismissed", false)                .findAllSorted("originalDate", Sort.DESCENDING));        adapter = new HeraldRV(resultsList);       dragScrollBar = new DragScrollBar(getContext(), heraldRecyclerView, true)                .setDraggableFromAnywhere(true).setHandleColour(ContextCompat.getColor(getContext(), R.color.colorAccent))                .setBarColour(ContextCompat.getColor(getContext(), R.color.grey500))                .setHandleOffColour(ContextCompat.getColor(getContext(), R.color.grey800));        heraldRecyclerView.setHasFixedSize(true);        heraldRecyclerView.setLayoutManager(new GridLayoutManager(getContext(), span()));        heraldRecyclerView.addItemDecoration(new DividerItemDecoration(getContext(), DividerItemDecoration.VERTICAL));        heraldRecyclerView.setAdapter(adapter);        swipeRefreshLayout.setColorSchemeResources(R.color.amber500, R.color.blue500, R.color                .brown500, R.color.cyan500, R.color.deeporange500, R.color.deepPurple500, R.color.green500, R                .color.grey500, R.color.indigo500, R.color.lightblue500, R.color.lime500, R.color                .orange500, R.color.pink500, R.color.red500, R.color.teal500, R.color.violet500, R                .color.yellow500);        swipeRefreshLayout.setOnRefreshListener(this);        adapter.setOnLikeClickedListener(this);        adapter.setOnShareClickedListener(this);        adapter.setOnItemClickedListener(this);        return V;    }    private int span() {        //Setup columns according to device screen        DisplayMetrics displayMetrics = getResources().getDisplayMetrics();        float dpHeight = displayMetrics.heightPixels / displayMetrics.density;        float dpWidth = displayMetrics.widthPixels / displayMetrics.density;        // Setting up images grid        float t = dpWidth / 300;        float r = dpWidth % 300;        int cols = 0;        if (r > 75f)            cols = (int) Math.ceil(dpWidth / 300);        else            cols = (int) t;        return cols;    }    @Override    public void onStart() {        super.onStart();        IntentFilter intf = new IntentFilter();        intf.addAction(UpdateCheckerService.DOWNLOAD_SUCCESS_ACTION);        intf.addAction(UpdateCheckerService.UPDATE_CHECK_OVER);        getActivity().registerReceiver(broadcastReceiver, intf);    }    @Override    public void onStop() {        super.onStop();        getActivity().unregisterReceiver(broadcastReceiver);    }    @Override    public void onRefresh() {        if (UpdateCheckerService.instance == null) {            if (ImageUrlHandlerService.instance == null) {                final Intent intent = new Intent(getContext(), UpdateCheckerService.class);                getContext().startService(intent);            } else {                swipeRefreshLayout.setRefreshing(false);                Snackbar.make(swipeRefreshLayout, "Update check is already in progress", Snackbar                        .LENGTH_SHORT).show();            }        } else {            swipeRefreshLayout.setRefreshing(false);            Snackbar.make(swipeRefreshLayout, "Update check is already in progress", Snackbar                    .LENGTH_SHORT).show();        }    }    //When an article is liked database has to be updated using the postID    @Override    public void onLiked(final String postID) {        database.executeTransaction(new Realm.Transaction() {            @Override            public void execute(Realm realm) {                HeraldNewsItemFormat foo = realm.where(HeraldNewsItemFormat.class).equalTo("postID", postID).findFirst();                foo.setFav(true);            }        });    }    //When an article is disliked database has to be updated using the postID    @Override    public void onDisLiked(final String postID) {        database.executeTransaction(new Realm.Transaction() {            @Override            public void execute(Realm realm) {                HeraldNewsItemFormat foo = realm.where(HeraldNewsItemFormat.class).equalTo("postID", postID).findFirst();                foo.setFav(false);            }        });    }    //When an article is shared sharing intent is started    @Override    public void onShare(String postID) {        HeraldNewsItemFormat foo = database.where(HeraldNewsItemFormat.class).equalTo("postID", postID).findFirst();        Intent intent = new Intent((Intent.ACTION_SEND));        intent.setType("text/plain");        intent.putExtra(android.content.Intent.EXTRA_TEXT, foo.getTitle_plain() + " at " + foo.getUrl());        startActivity(Intent.createChooser(intent, "Share via"));    }    //Article was clicked, accordingly open the webpage    @Override    public void onClick(String postID) {        HeraldNewsItemFormat foo = database.where(HeraldNewsItemFormat.class).equalTo("postID", postID).findFirst();        if (isNetworkAvailable()) {            try {                Intent intent = new Intent((Intent.ACTION_SEND));                intent.putExtra(android.content.Intent.EXTRA_TEXT, foo.getUrl());                Intent copy_intent = new Intent(getContext(), CopyLinkBroadcastReceiver.class);                PendingIntent copy_pendingIntent = PendingIntent.getBroadcast(getContext(), 0, copy_intent, PendingIntent.FLAG_UPDATE_CURRENT);                String copy_label = "Copy Link";                CustomTabsIntent customTabsIntent = new CustomTabsIntent.Builder()                        .setShowTitle(true)                        .setToolbarColor(ContextCompat.getColor(getContext(), R.color                                .blue500))                        .setCloseButtonIcon(BitmapFactory.decodeResource(getResources(), R.drawable.ic_arrow_back_white_24dp))                        .addMenuItem(copy_label, copy_pendingIntent)                        .addDefaultShareMenuItem()                        .enableUrlBarHiding()                        .build();                CustomTabActivityHelper.openCustomTab(getActivity(), customTabsIntent,                        Uri.parse(foo.getUrl()),                        new CustomTabActivityHelper.CustomTabFallback() {                            @Override                            public void openUri(Activity activity, Uri uri) {                                Intent intent = new Intent(Intent.ACTION_VIEW, uri);                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP_MR1) {                                    intent.putExtra(Intent.EXTRA_REFERRER,                                            Uri.parse(Intent.URI_ANDROID_APP_SCHEME + "//" + getContext().getPackageName()));                                }                                startActivity(intent);                            }                        });            } catch (Exception e) {                Intent openWebpage = new Intent(getContext(), OpenWebpage.class);                openWebpage.putExtra("URL", foo.getUrl());                openWebpage.putExtra("TITLE", foo.getTitle());                openWebpage.putExtra("POSTID", postID);                startActivity(openWebpage);            }        } else {            Intent intent = new Intent(getContext(), OfflineSimpleViewer.class);            intent.putExtra("POSTID", postID);            startActivity(intent);        }    }    //Check if phone is connected to the Internet (not meaning it is working for sure)    private boolean isNetworkAvailable() {        ConnectivityManager connectivityManager                = (ConnectivityManager) getContext().getSystemService(Context.CONNECTIVITY_SERVICE);        NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();        return activeNetworkInfo != null && activeNetworkInfo.isConnectedOrConnecting();    }}